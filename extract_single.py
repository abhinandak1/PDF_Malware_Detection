import subprocess
import csv
from collections import defaultdict

# Function to extract features from pdfid output
def extract_features_pdfid(pdfid_output):
    features = defaultdict(int)
    lines = pdfid_output.split('\n')
    for line in lines:
        if line and ' ' in line:
            parts = line.split()
            try:
                feature = parts[0].lstrip('/')
                feature_count = int(parts[1])
                features[feature] = feature_count
            except ValueError:
                pass
    # Check if the "Colors" feature exists and set its binary value
    features['Colors'] = 1 if 'Colors' in features else 0
    return features

# Function to run pdfid on a PDF file and return its output
def run_pdfid(pdf_file):
    try:
        pdfid_output = subprocess.check_output(['pdfid', pdf_file], universal_newlines=True)
        return pdfid_output
    except subprocess.CalledProcessError:
        return None

# Function to write features to a CSV file without header row
def write_to_csv(features, csv_file):
    with open(csv_file, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        # Write counts row without header
        writer.writerow(features.values())

# Main function to extract features from a PDF file and write to a CSV file
def extract_features_to_csv(pdf_file, csv_file):
    pdfid_output = run_pdfid(pdf_file)
    if pdfid_output:
        pdfid_features = extract_features_pdfid(pdfid_output)
        write_to_csv(pdfid_features, csv_file)
        print("Features extracted successfully and saved to", csv_file)
    else:
        print("Error occurred while extracting features.")

# Example usage
if __name__ == "__main__":
    pdf_file = "00c27464078799a862eb5bc3abc3151f17ec5b8a"  # Replace with your PDF file path
    csv_file = "single_feature.csv"  # Replace with desired CSV file path
    extract_features_to_csv(pdf_file, csv_file)
